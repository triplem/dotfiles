#+title: Security-Setup

* Security Setup

** git-server

This could be used for the password storeage (gopass).

Follow the git server instructions [[https://miracoin.wordpress.com/2014/11/25/step-by-step-guide-on-setting-up-git-server-in-arch-linux-pushable/][here]] and in the [[https://git-scm.com/book/en/v2/Git-on-the-Server-Setting-Up-the-Server][Git SCM Book]].

I just created a project called `secrets.git` to be able to store the passwords from gopass in here.

Please note, that the home directory of the git-user should be set to /srv/git. The git-shell is already configured in the currently installed version,
so that just the commands `push` and `pull` can be used as a security restriction.

** dropbear ssh-server

*** install dropbear
I wanted to install a small ssh-server, to be able to do this also on a raspi. I decided on dropbear, which seems to be a small and easy to use choice. It
can be installed on ArchLinux (oh, and I do use Arch, btw...) via the following command:

#+BEGIN_SRC shell
pacman -S dropbear
#+END_SRC

*** disable root login in /usr/systemd/system/dropbear.service using `-w` as well as `-s` to disallow the password login as well.

#+BEGIN_SRC sh
ExecStart=/usr/bin/dropbear -F -w -s -P /run/dropbear.pid -R
#+END_SRC

*** copy your public ssh key to /srv/git/.ssh/authorized_keys

#+BEGIN_SRC sh
mkdir -p /srv/git/.ssh
cp /tmp/id_rsa.git /srv/git/.ssh/authorized_keys
chown git:git /srv/git/.ssh -R
chmod 0700 /srv/git/.ssh
chmod 0600 /srv/git/.ssh/authorized_keys
#+END_SRC

** gpg

Since up until now, I did not own a valid primary key, I just created one, using the "usual" method. This key is never invalidated and I used RSA4096.
In the comment I specifically stated, that this is my primary key.

#+BEGIN_SRC sh
gpg --full-generate-key
#+END_SRC

Since this key is rather important, it should be backed up:

#+BEGIN_SRC sh
umask 077; tar -cf $HOME/gnupg-backup.tar -C $HOME .gnupg
#+END_SRC

Add a sub-key using the following commands

#+BEGIN_SRC sh
gpg --list-keys
gpg --edit-key PRIMARYKEYID

# add signing key
gpg> addkey
4 - RSA (signing only)
4096
unlimited validity

gpg> save

gpg --list-keys --with-keygrip
#+END_SRC

Follow the instructions in the wiki to remove the primary key and use the subkey for the encryption with gopass.

IMPORTANT!!!!
Please backup your primary key beforehand.


** gopass

#+BEGIN_SRC sh
pacman -S gnupg gopass gopass-jsonapi
#+END_SRC

To be able to use gopass on several machines, we could follow [[https://github.com/gopasspw/gopass/issues/914][gopass on multiple machines - github issue]].

a. export the private gpg key and copy it to the other machine, this is rather insecure
b. add addtional user (gpg recipients) to gopass
c. use gpg subkeys

I do like the idea of subkeys and have found a pretty good explanation of it on the [[https://wiki.debian.org/Subkeys][debian wiki]].

#+BEGIN_SRC sh
gopass setup

gopass create
#+END_SRC

add some keys

#+BEGIN_SRC sh
gopass-jsonapi configure
#+END_SRC

** Import the passwords from google passwd

Since I did not want to use google anymore, that is the reason for this anyways, I exported these passwords in an csv file, which was necessary to get imported into gopass.

#+BEGIN_SRC sh
yay -S pass-import
#+END_SRC

Since this was not working for me, therefore:

#+BEGIN_SRC sh
cd ~/.cache/yay/pass-import
gpg --recv-keys 06A26D531D56C42D66805049C5469996F0DF68EC
makepkg

export PASSWORD_STORE_DIR=~/.local/share/gopass/stores/root/
pass import google-export.csv
#+END_SRC

The Signature of the package can be found [[https://github.com/roddhjav/pass-import/releases/download/v3.2/pass-import-3.2.tar.gz.asc][here]].

** Additional Key for maven-central

I also did pretty much the same with another email-address to provide a key (which is invalidated) for the Maven Central Repository.

Follow the [[https://central.sonatype.org/publish/requirements/gpg/#signing-a-file][Signing a File]] documentation. The key is invalidated on 2027-12-17.

** Android App (password store)

*** install OpenKeychain Easy PGP
*** on laptop

#+BEGIN_SRC sh
gpg --export-secret-key -a WHOEVER_YU_ARE > secret.key
#+END_SRC

*** import it on cell phone
**** install app `Password Store`
**** generate ssh-key
**** add generated pub-key to /srv/git/.ssh/authorized_keys
**** add above generated git repo to cell phone
**** delete already existing git repo on cell phone
**** clone remote repo
*** upload public key to keyserver.ubuntu.com
*** upload public key to github.com, it can be found on github.com/triplem.gpg

** yubikey

#+BEGIN_SRC sh
pacman -S yubikey-manager
#+END_SRC

Start yubikey manager and follow the listed steps

- set Interfaces on USB as well as NFC:
  - FIDOU2F
  - FIDO2
  - OpenPGP

Some helpful settings:

initial pin 123456
initial admin pin 12345678
new pins are stored in gopass :-)
do not forget to set "reset code"

account name: mmay
url: https://github.com/triplem.gpg

https://developer.okta.com/blog/2021/07/07/developers-guide-to-gpg

#+BEGIN_SRC sh
gpg --edit-key 193AE4F223C0BA6F8D7E4C4A251023C3A3FB669A (my personal key id)
#+END_SRC

The backups for the initial keys are:

gnupg-inital-keys-backup.tar contains original primary key
backup-yubikey-gnupg.tar contains keys from second yubikey (after export to key)
original-yubikey-gnupg.tar contains keys from first yubikey (after export to key)
reassign with gpg --card-edit // fetch -- use gnupg-secondary-keys-backup.tar

For additional help with YubiKey and OpenPGP see [[https://support.yubico.com/hc/en-us/articles/360013790259-Using-Your-YubiKey-with-OpenPGP][here.]]
